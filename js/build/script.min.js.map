{"version":3,"sources":["../page.js","../arrivals.js","../main.js"],"names":["Page","ViewModel","this","arrivals","ko","observableArray","vm","hideOfflineWarning","document","querySelector","classList","remove","getElementById","showOfflineWarning","add","request","XMLHttpRequest","open","onload","status","offlineMessageElement","createElement","setAttribute","innerHTML","responseText","appendChild","console","warn","onerror","error","send","Arrivals","ArrivalViewModel","self","title","author","description","url","urlToImage","publishedAt","ArrivalApiService","getAll","Promise","resolve","reject","JSON","parse","response","Error","statusText","ArrivalAdapter","toArrivalViewModel","data","toArrivalViewModels","length","map","item","ArrivalController","arrivalApiService","arrivalAdapter","then","articles","arrivalController","loadData","navigator","serviceWorker","register","reg","log","catch","err","window","addEventListener","e","onLine","applyBindings"],"mappings":"AAAA,GAAIA,MAAO,WAGP,QAASC,aACMC,KACNC,SAAWC,GAAGC,oBAIvB,OACIC,GAAI,GAAIL,WACRM,mBAAoB,WAEhBC,SAASC,cAAc,kBAAkBC,UAAUC,OAAO,WAE1DH,SAASI,eAAe,WAAWD,UAGvCE,mBAAoB,WAEhBL,SAASC,cAAc,kBAAkBC,UAAUI,IAAI,UAEvD,IAAIC,SAAU,GAAIC,eAClBD,SAAQE,KAAK,MAAO,kBAAkB,GAEtCF,QAAQG,OAAS,WACb,GAAuB,MAAnBH,QAAQI,OAAgB,CAGxB,GAAIC,uBAAwBZ,SAASa,cAAc,MACnDD,uBAAsBE,aAAa,KAAM,WACzCF,sBAAsBG,UAAYR,QAAQS,aAC1ChB,SAASI,eAAe,QAAQa,YAAYL,2BAG5CM,SAAQC,KAAK,kCAIrBZ,QAAQa,QAAU,WAEdF,QAAQG,MAAM,qBAGlBd,QAAQe,YC5ChBC,SAAW,WACX,QAASC,oBACL,GAAIC,MAAO/B,IACX+B,MAAKC,MAAQ,GACbD,KAAKE,OAAS,GACpBF,KAAKG,YAAc,GACnBH,KAAKI,IAAM,GACXJ,KAAKK,WAAa,GACZL,KAAKM,YAAc,GAGvB,QAASC,qBACMtC,KAGNuC,OAAS,WACV,MAAO,IAAIC,SAAQ,SAASC,QAASC,QACjC,GAAI7B,SAAU,GAAIC,eAClBD,SAAQE,KAAK,MAAO,6GAEpBF,QAAQG,OAAS,WAEU,MAAnBH,QAAQI,OAERwB,QAAQE,KAAKC,MAAM/B,QAAQgC,WAG3BH,OAAOI,MAAMjC,QAAQkC,cAI7BlC,QAAQa,QAAU,WAEdgB,OAAOI,MAAM,mBAGjBjC,QAAQe,UAKpB,QAASoB,kBACL,GAAIjB,MAAO/B,IAEX+B,MAAKkB,mBAAqB,SAASC,MAC/B,GAAIA,KAAM,CACN,GAAI9C,IAAK,GAAI0B,iBAYb,OAPX1B,IAAG4B,MAAQkB,KAAKlB,MAChB5B,GAAG6B,OAASiB,KAAKjB,OACjB7B,GAAG8B,YAAcgB,KAAKhB,YACtB9B,GAAG+B,IAAMe,KAAKf,IACd/B,GAAGgC,WAAac,KAAKd,WACrBhC,GAAGiC,YAAca,KAAKb,YAEJjC,GAEX,MAAO,OAGX2B,KAAKoB,oBAAsB,SAASD,MAChC,MAAIA,OAAQA,KAAKE,OAAS,EACfF,KAAKG,IAAI,SAASC,MACrB,MAAOvB,MAAKkB,mBAAmBK,YAO/C,QAASC,mBAAkBC,kBAAmBC,gBAC/BzD,KAENuC,OAAS,WAEV,MAAOiB,mBAAkBjB,SAASmB,KAAK,SAASb,UAC5C,MAAOY,gBAAeN,oBAAoBN,SAASc,aAO/D,GAAIH,mBAAoB,GAAIlB,mBACxBmB,eAAiB,GAAIT,gBAGrBY,kBAAoB,GAAIL,mBAAkBC,kBAAmBC,eAEjE,QACII,SAAU,WAENvD,SAASC,cAAc,QAAQC,UAAUI,IAAI,WAC7CgD,kBAAkBrB,SAASmB,KAAK,SAASb,UAErC/C,KAAKM,GAAGH,SAAS4C,UACjBvC,SAASC,cAAc,QAAQC,UAAUC,OAAO,iBClG5D,kBAAmBqD,YACnBA,UAAUC,cAAcC,SAAS,WAAWN,KAAK,SAASO,KACtDzC,QAAQ0C,IAAI,yCAA0CD,OACvDE,MAAM,SAASC,KACd5C,QAAQC,KAAK,0CAA2C2C,OAIhEC,OAAOC,iBAAiB,SAAU,SAASC,GAEvC/C,QAAQ0C,IAAI,kBACZpE,KAAKO,qBACLwB,SAASgC,aACV,GAEHQ,OAAOC,iBAAiB,UAAW,SAASC,GAExC/C,QAAQ0C,IAAI,mBACZpE,KAAKa,uBACN,GAGCmD,UAAUU,OACV3C,SAASgC,WAGT/D,KAAKa,qBAITT,GAAGuE,cAAc3E,KAAKM","file":"script.min.js","sourcesContent":["var Page = (function() {\n\n    // declare the view model used within the page\n    function ViewModel() {\n        var self = this;\n        self.arrivals = ko.observableArray([]);\n    }\n\n    // expose the view model through the Page module\n    return {\n        vm: new ViewModel(),\n        hideOfflineWarning: function() {\n            // enable the live data\n            document.querySelector(\".arrivals-list\").classList.remove('loading')\n            // remove the offline message\n            document.getElementById(\"offline\").remove();\n            // load the live data\n        },\n        showOfflineWarning: function() {\n            // disable the live data\n            document.querySelector(\".arrivals-list\").classList.add('loading')\n                // load html template informing the user they are offline\n            var request = new XMLHttpRequest();\n            request.open('GET', './offline.html', true);\n\n            request.onload = function() {\n                if (request.status === 200) {\n                    // success\n                    // create offline element with HTML loaded from offline.html template\n                    var offlineMessageElement = document.createElement(\"div\");\n                    offlineMessageElement.setAttribute(\"id\", \"offline\");\n                    offlineMessageElement.innerHTML = request.responseText;\n                    document.getElementById(\"main\").appendChild(offlineMessageElement);\n                } else {\n                    // error retrieving file\n                    console.warn('Error retrieving offline.html');\n                }\n            };\n\n            request.onerror = function() {\n                // network errors\n                console.error('Connection error');\n            };\n\n            request.send();\n        }\n    }\n\n})();\n","var Arrivals = (function() {\n    function ArrivalViewModel() {\n        var self = this;\n        self.title = \"\";\n        self.author = \"\";\n\t\tself.description = \"\";\n\t\tself.url = \"\";\n\t\tself.urlToImage = \"\";\n        self.publishedAt = \"\";\n    }\n\n    function ArrivalApiService() {\n        var self = this;\n\n        // retrieves all arrivals from the API\n        self.getAll = function() {\n            return new Promise(function(resolve, reject) {\n                var request = new XMLHttpRequest();\n                request.open('GET', 'https://newsapi.org/v1/articles?source=the-next-web&sortBy=latest&apiKey=b1847e0da84043abb73f5669ffbc87c5');\n\n                request.onload = function() {\n                    // success\n                    if (request.status === 200) {\n                        // resolve the promise with the parsed response text (assumes JSON)\n                        resolve(JSON.parse(request.response));\n                    } else {\n                        // error retrieving file\n                        reject(Error(request.statusText));\n                    }\n                };\n\n                request.onerror = function() {\n                    // network errors\n                    reject(Error(\"Network Error\"));\n                };\n\n                request.send();\n            });\n        };\n    }\n\n    function ArrivalAdapter() {\n        var self = this;\n\n        self.toArrivalViewModel = function(data) {\n            if (data) {\n                var vm = new ArrivalViewModel();\n               // vm.title = data.title;\n              //  vm.status = data.status;\n               // vm.time = data.time;\n\t\t\t\t\n\t\t\t\t\tvm.title = data.title;\n\t\t\t\t\tvm.author = data.author;\n\t\t\t\t\tvm.description = data.description;\n\t\t\t\t\tvm.url = data.url;\n\t\t\t\t\tvm.urlToImage = data.urlToImage;\n\t\t\t\t\tvm.publishedAt = data.publishedAt;\n\n                return vm;\n            }\n            return null;\n        };\n\n        self.toArrivalViewModels = function(data) {\n            if (data && data.length > 0) {\n                return data.map(function(item) {\n                    return self.toArrivalViewModel(item);\n                });\n            }\n            return [];\n        };\n    }\n\n    function ArrivalController(arrivalApiService, arrivalAdapter) {\n        var self = this;\n\n        self.getAll = function() {\n            // retrieve all the arrivals from the API\n            return arrivalApiService.getAll().then(function(response) {\n                return arrivalAdapter.toArrivalViewModels(response.articles);\n            });\n        };\n    }\n\n\n    // initialize the services and adapters\n    var arrivalApiService = new ArrivalApiService();\n    var arrivalAdapter = new ArrivalAdapter();\n\n    // initialize the controller\n    var arrivalController = new ArrivalController(arrivalApiService, arrivalAdapter);    \n\n    return {\n        loadData: function() {\n            // retrieve all routes\n            document.querySelector(\"body\").classList.add('loading')\n            arrivalController.getAll().then(function(response) {\n                // bind the arrivals to the UI\n                Page.vm.arrivals(response);\n                document.querySelector(\"body\").classList.remove('loading')\n            });\n        }\n    }\n\n})();\n","// register the service worker if available\nif ('serviceWorker' in navigator) {\n    navigator.serviceWorker.register('./sw.js').then(function(reg) {\n        console.log('Successfully registered service worker', reg);\n    }).catch(function(err) {\n        console.warn('Error whilst registering service worker', err);\n    });\n}\n\nwindow.addEventListener('online', function(e) {\n    // re-sync data with server\n    console.log(\"You are online\");\n    Page.hideOfflineWarning();\n    Arrivals.loadData();\n}, false);\n\nwindow.addEventListener('offline', function(e) {\n    // queue up events for server\n    console.log(\"You are offline\");\n    Page.showOfflineWarning();\n}, false);\n\n// check if the user is connected\nif (navigator.onLine) {\n    Arrivals.loadData();\n} else {\n    // show offline message\n    Page.showOfflineWarning();\n}\n\n// set knockout view model bindings\nko.applyBindings(Page.vm);\n"]}